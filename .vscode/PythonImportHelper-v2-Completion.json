[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "Lehmer",
        "importPath": "lehmer32",
        "description": "lehmer32",
        "isExtraImport": true,
        "detail": "lehmer32",
        "documentation": {}
    },
    {
        "label": "Lehmer",
        "importPath": "lehmer32",
        "description": "lehmer32",
        "isExtraImport": true,
        "detail": "lehmer32",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "Planet",
        "importPath": "starSystem",
        "description": "starSystem",
        "isExtraImport": true,
        "detail": "starSystem",
        "documentation": {}
    },
    {
        "label": "starSystem",
        "importPath": "starSystem",
        "description": "starSystem",
        "isExtraImport": true,
        "detail": "starSystem",
        "documentation": {}
    },
    {
        "label": "Lehmer",
        "kind": 6,
        "importPath": "lehmer32",
        "description": "lehmer32",
        "peekOfCode": "class Lehmer:\n    def __init__(self, num=0):\n        self.nLehmer = num\n    def seed(self, num):\n        self.nLehmer = num\n    def Lehmer(self):\n        self.nLehmer += 0xe120fc15\n        tmp =  self.nLehmer * 0x4a39b70d\n        m1 = tmp >> 32 ^ tmp\n        tmp =  m1 * 0x1fad5c9",
        "detail": "lehmer32",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def draw():\n    global starSelected, vStarSelected, selectedStar # Declare them as global\n    keys = pygame.key.get_pressed()\n    speed = 100  # Movement speed in pixels per second\n    elapsedTime = clock.get_time() / 24  # Convert to seconds\n    # Move galaxy offset\n    if keys[pygame.K_LEFT]:\n        galaxyOffset[0] -= speed * elapsedTime\n    if keys[pygame.K_RIGHT]:\n        galaxyOffset[0] += speed * elapsedTime",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "draw_star_info",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def draw_star_info(selectedStar):\n    if not selectedStar:\n        return\n    \"\"\" Draws the planet and moon details in a panel. \"\"\"\n    panel_width, panel_height = 1000, 500\n    panel_x, panel_y = 0, 500 \n    panel = pygame.Surface((panel_width, panel_height))\n    panel.fill((50, 50, 50))\n    font = pygame.font.Font(None, 24)\n    star_x = int((selectedStar.starDiameter * 3 / 2) + 100)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "GRID_SIZE",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "GRID_SIZE = 50\nFPS = 120\nBACKGROUND_COLOR = (0, 0, 0)\n# Set up the screen\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"Simulating a universe\")\n# Clock to control frame rate\nclock = pygame.time.Clock()\ngalaxyOffset = [0, 0]\nstarSelected = False",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "FPS",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "FPS = 120\nBACKGROUND_COLOR = (0, 0, 0)\n# Set up the screen\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"Simulating a universe\")\n# Clock to control frame rate\nclock = pygame.time.Clock()\ngalaxyOffset = [0, 0]\nstarSelected = False\nvStarSelected = [0, 0]",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "BACKGROUND_COLOR",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "BACKGROUND_COLOR = (0, 0, 0)\n# Set up the screen\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"Simulating a universe\")\n# Clock to control frame rate\nclock = pygame.time.Clock()\ngalaxyOffset = [0, 0]\nstarSelected = False\nvStarSelected = [0, 0]\nselectedStar = None",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "screen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"Simulating a universe\")\n# Clock to control frame rate\nclock = pygame.time.Clock()\ngalaxyOffset = [0, 0]\nstarSelected = False\nvStarSelected = [0, 0]\nselectedStar = None\ndef draw():\n    global starSelected, vStarSelected, selectedStar # Declare them as global",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "clock = pygame.time.Clock()\ngalaxyOffset = [0, 0]\nstarSelected = False\nvStarSelected = [0, 0]\nselectedStar = None\ndef draw():\n    global starSelected, vStarSelected, selectedStar # Declare them as global\n    keys = pygame.key.get_pressed()\n    speed = 100  # Movement speed in pixels per second\n    elapsedTime = clock.get_time() / 24  # Convert to seconds",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "galaxyOffset",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "galaxyOffset = [0, 0]\nstarSelected = False\nvStarSelected = [0, 0]\nselectedStar = None\ndef draw():\n    global starSelected, vStarSelected, selectedStar # Declare them as global\n    keys = pygame.key.get_pressed()\n    speed = 100  # Movement speed in pixels per second\n    elapsedTime = clock.get_time() / 24  # Convert to seconds\n    # Move galaxy offset",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "starSelected",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "starSelected = False\nvStarSelected = [0, 0]\nselectedStar = None\ndef draw():\n    global starSelected, vStarSelected, selectedStar # Declare them as global\n    keys = pygame.key.get_pressed()\n    speed = 100  # Movement speed in pixels per second\n    elapsedTime = clock.get_time() / 24  # Convert to seconds\n    # Move galaxy offset\n    if keys[pygame.K_LEFT]:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "vStarSelected",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "vStarSelected = [0, 0]\nselectedStar = None\ndef draw():\n    global starSelected, vStarSelected, selectedStar # Declare them as global\n    keys = pygame.key.get_pressed()\n    speed = 100  # Movement speed in pixels per second\n    elapsedTime = clock.get_time() / 24  # Convert to seconds\n    # Move galaxy offset\n    if keys[pygame.K_LEFT]:\n        galaxyOffset[0] -= speed * elapsedTime",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "selectedStar",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "selectedStar = None\ndef draw():\n    global starSelected, vStarSelected, selectedStar # Declare them as global\n    keys = pygame.key.get_pressed()\n    speed = 100  # Movement speed in pixels per second\n    elapsedTime = clock.get_time() / 24  # Convert to seconds\n    # Move galaxy offset\n    if keys[pygame.K_LEFT]:\n        galaxyOffset[0] -= speed * elapsedTime\n    if keys[pygame.K_RIGHT]:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "running = True\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    draw()\n    pygame.display.flip()\n    clock.tick(FPS)\npygame.quit()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Planet",
        "kind": 6,
        "importPath": "starSystem",
        "description": "starSystem",
        "peekOfCode": "class Planet:\n    def __init__(self):\n        self.distance = 0.0\n        self.diameter = 0.0\n        self.foilage = 0.0\n        self.minerals = 0.0\n        self.water = 0.0\n        self.gases = 0.0\n        self.temperature = 0.0\n        self.life = 0.0",
        "detail": "starSystem",
        "documentation": {}
    },
    {
        "label": "starSystem",
        "kind": 6,
        "importPath": "starSystem",
        "description": "starSystem",
        "peekOfCode": "class starSystem:\n    def __init__(self, x, y, z=0, generateFullSystem=False):\n        self.x = x\n        self.y = y\n        self.z = z\n        self.nlehmer = Lehmer((int(x) & 0xffff) << 16 | (int(y) & 0xffff))\n        self.starExists = self.rndInt(0, 20) == 1\n        if(not self.starExists):\n            return;\n        self.starDiameter = self.rndInt(10, 40)",
        "detail": "starSystem",
        "documentation": {}
    }
]